// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const http = require('http');

const BASE_URL = 'http://localhost:3000';

function makeRequest(method, path, data = null, token = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
      }
    };

    if (token) {
      options.headers['Authorization'] = `Bearer ${token}`;
    }

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function testAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ LinkShorty\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...');
    const baseResponse = await makeRequest('GET', '/');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${baseResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(baseResponse.data, null, 2)}\n`);

    // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const registerData = {
      username: 'testuser',
      password: 'testpassword123'
    };
    
    const registerResponse = await makeRequest('POST', '/api/auth/register', registerData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${registerResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(registerResponse.data, null, 2)}`);
    
    let token = null;
    if (registerResponse.status === 201 && registerResponse.data.token) {
      token = registerResponse.data.token;
      console.log('   ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ\n');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n');
    }

    // –¢–µ—Å—Ç 3: –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    console.log('3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É...');
    const loginResponse = await makeRequest('POST', '/api/auth/login', registerData);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${loginResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(loginResponse.data, null, 2)}`);
    
    if (loginResponse.status === 200 && loginResponse.data.token) {
      token = loginResponse.data.token;
      console.log('   ‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ\n');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ\n');
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    if (token) {
      console.log('4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...');
      const profileResponse = await makeRequest('GET', '/api/auth/profile', null, token);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${profileResponse.status}`);
      console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(profileResponse.data, null, 2)}`);
      
      if (profileResponse.status === 200) {
        console.log('   ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ\n');
      } else {
        console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è\n');
      }
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    console.log('5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
    const noTokenResponse = await makeRequest('GET', '/api/auth/profile');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${noTokenResponse.status}`);
    console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(noTokenResponse.data, null, 2)}`);
    
    if (noTokenResponse.status === 401) {
      console.log('   ‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');
    } else {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞—â–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∞\n');
    }

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: pnpm dev');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI();
